#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfVideo103
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GestionPedidos")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertEmpresas(Empresas instance);
    partial void UpdateEmpresas(Empresas instance);
    partial void DeleteEmpresas(Empresas instance);
    partial void InsertEmpleados(Empleados instance);
    partial void UpdateEmpleados(Empleados instance);
    partial void DeleteEmpleados(Empleados instance);
    partial void InsertCargos(Cargos instance);
    partial void UpdateCargos(Cargos instance);
    partial void DeleteCargos(Cargos instance);
    partial void InsertCargoEmpleados(CargoEmpleados instance);
    partial void UpdateCargoEmpleados(CargoEmpleados instance);
    partial void DeleteCargoEmpleados(CargoEmpleados instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::WpfVideo103.Properties.Settings.Default.CrudLinqSQLConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Empresas> Empresas
		{
			get
			{
				return this.GetTable<Empresas>();
			}
		}
		
		public System.Data.Linq.Table<Empleados> Empleados
		{
			get
			{
				return this.GetTable<Empleados>();
			}
		}
		
		public System.Data.Linq.Table<Cargos> Cargos
		{
			get
			{
				return this.GetTable<Cargos>();
			}
		}
		
		public System.Data.Linq.Table<CargoEmpleados> CargoEmpleados
		{
			get
			{
				return this.GetTable<CargoEmpleados>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Empresas")]
	public partial class Empresas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _nombre;
		
		private EntitySet<Empleados> _Empleados;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnombreChanging(string value);
    partial void OnnombreChanged();
    #endregion
		
		public Empresas()
		{
			this._Empleados = new EntitySet<Empleados>(new Action<Empleados>(this.attach_Empleados), new Action<Empleados>(this.detach_Empleados));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre", DbType="NVarChar(50)")]
		public string nombre
		{
			get
			{
				return this._nombre;
			}
			set
			{
				if ((this._nombre != value))
				{
					this.OnnombreChanging(value);
					this.SendPropertyChanging();
					this._nombre = value;
					this.SendPropertyChanged("nombre");
					this.OnnombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Empresas_Empleados", Storage="_Empleados", ThisKey="id", OtherKey="idEmpresa")]
		public EntitySet<Empleados> Empleados
		{
			get
			{
				return this._Empleados;
			}
			set
			{
				this._Empleados.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Empleados(Empleados entity)
		{
			this.SendPropertyChanging();
			entity.Empresas = this;
		}
		
		private void detach_Empleados(Empleados entity)
		{
			this.SendPropertyChanging();
			entity.Empresas = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Empleados")]
	public partial class Empleados : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _nombre;
		
		private string _apellidos;
		
		private int _idEmpresa;
		
		private EntitySet<CargoEmpleados> _CargoEmpleados;
		
		private EntityRef<Empresas> _Empresas;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnombreChanging(string value);
    partial void OnnombreChanged();
    partial void OnapellidosChanging(string value);
    partial void OnapellidosChanged();
    partial void OnidEmpresaChanging(int value);
    partial void OnidEmpresaChanged();
    #endregion
		
		public Empleados()
		{
			this._CargoEmpleados = new EntitySet<CargoEmpleados>(new Action<CargoEmpleados>(this.attach_CargoEmpleados), new Action<CargoEmpleados>(this.detach_CargoEmpleados));
			this._Empresas = default(EntityRef<Empresas>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nombre
		{
			get
			{
				return this._nombre;
			}
			set
			{
				if ((this._nombre != value))
				{
					this.OnnombreChanging(value);
					this.SendPropertyChanging();
					this._nombre = value;
					this.SendPropertyChanged("nombre");
					this.OnnombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_apellidos", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string apellidos
		{
			get
			{
				return this._apellidos;
			}
			set
			{
				if ((this._apellidos != value))
				{
					this.OnapellidosChanging(value);
					this.SendPropertyChanging();
					this._apellidos = value;
					this.SendPropertyChanged("apellidos");
					this.OnapellidosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmpresa", DbType="Int NOT NULL")]
		public int idEmpresa
		{
			get
			{
				return this._idEmpresa;
			}
			set
			{
				if ((this._idEmpresa != value))
				{
					if (this._Empresas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmpresaChanging(value);
					this.SendPropertyChanging();
					this._idEmpresa = value;
					this.SendPropertyChanged("idEmpresa");
					this.OnidEmpresaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Empleados_CargoEmpleados", Storage="_CargoEmpleados", ThisKey="id", OtherKey="idEmpleado")]
		public EntitySet<CargoEmpleados> CargoEmpleados
		{
			get
			{
				return this._CargoEmpleados;
			}
			set
			{
				this._CargoEmpleados.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Empresas_Empleados", Storage="_Empresas", ThisKey="idEmpresa", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Empresas Empresas
		{
			get
			{
				return this._Empresas.Entity;
			}
			set
			{
				Empresas previousValue = this._Empresas.Entity;
				if (((previousValue != value) 
							|| (this._Empresas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Empresas.Entity = null;
						previousValue.Empleados.Remove(this);
					}
					this._Empresas.Entity = value;
					if ((value != null))
					{
						value.Empleados.Add(this);
						this._idEmpresa = value.id;
					}
					else
					{
						this._idEmpresa = default(int);
					}
					this.SendPropertyChanged("Empresas");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CargoEmpleados(CargoEmpleados entity)
		{
			this.SendPropertyChanging();
			entity.Empleados = this;
		}
		
		private void detach_CargoEmpleados(CargoEmpleados entity)
		{
			this.SendPropertyChanging();
			entity.Empleados = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cargos")]
	public partial class Cargos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _nombre;
		
		private EntitySet<CargoEmpleados> _CargoEmpleados;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnombreChanging(string value);
    partial void OnnombreChanged();
    #endregion
		
		public Cargos()
		{
			this._CargoEmpleados = new EntitySet<CargoEmpleados>(new Action<CargoEmpleados>(this.attach_CargoEmpleados), new Action<CargoEmpleados>(this.detach_CargoEmpleados));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nombre
		{
			get
			{
				return this._nombre;
			}
			set
			{
				if ((this._nombre != value))
				{
					this.OnnombreChanging(value);
					this.SendPropertyChanging();
					this._nombre = value;
					this.SendPropertyChanged("nombre");
					this.OnnombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cargos_CargoEmpleados", Storage="_CargoEmpleados", ThisKey="id", OtherKey="idCargo")]
		public EntitySet<CargoEmpleados> CargoEmpleados
		{
			get
			{
				return this._CargoEmpleados;
			}
			set
			{
				this._CargoEmpleados.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CargoEmpleados(CargoEmpleados entity)
		{
			this.SendPropertyChanging();
			entity.Cargos = this;
		}
		
		private void detach_CargoEmpleados(CargoEmpleados entity)
		{
			this.SendPropertyChanging();
			entity.Cargos = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CargoEmpleados")]
	public partial class CargoEmpleados : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idEmpleado;
		
		private int _idCargo;
		
		private EntityRef<Cargos> _Cargos;
		
		private EntityRef<Empleados> _Empleados;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidEmpleadoChanging(int value);
    partial void OnidEmpleadoChanged();
    partial void OnidCargoChanging(int value);
    partial void OnidCargoChanged();
    #endregion
		
		public CargoEmpleados()
		{
			this._Cargos = default(EntityRef<Cargos>);
			this._Empleados = default(EntityRef<Empleados>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmpleado", DbType="Int NOT NULL")]
		public int idEmpleado
		{
			get
			{
				return this._idEmpleado;
			}
			set
			{
				if ((this._idEmpleado != value))
				{
					if (this._Empleados.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmpleadoChanging(value);
					this.SendPropertyChanging();
					this._idEmpleado = value;
					this.SendPropertyChanged("idEmpleado");
					this.OnidEmpleadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCargo", DbType="Int NOT NULL")]
		public int idCargo
		{
			get
			{
				return this._idCargo;
			}
			set
			{
				if ((this._idCargo != value))
				{
					if (this._Cargos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCargoChanging(value);
					this.SendPropertyChanging();
					this._idCargo = value;
					this.SendPropertyChanged("idCargo");
					this.OnidCargoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cargos_CargoEmpleados", Storage="_Cargos", ThisKey="idCargo", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Cargos Cargos
		{
			get
			{
				return this._Cargos.Entity;
			}
			set
			{
				Cargos previousValue = this._Cargos.Entity;
				if (((previousValue != value) 
							|| (this._Cargos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cargos.Entity = null;
						previousValue.CargoEmpleados.Remove(this);
					}
					this._Cargos.Entity = value;
					if ((value != null))
					{
						value.CargoEmpleados.Add(this);
						this._idCargo = value.id;
					}
					else
					{
						this._idCargo = default(int);
					}
					this.SendPropertyChanged("Cargos");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Empleados_CargoEmpleados", Storage="_Empleados", ThisKey="idEmpleado", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Empleados Empleados
		{
			get
			{
				return this._Empleados.Entity;
			}
			set
			{
				Empleados previousValue = this._Empleados.Entity;
				if (((previousValue != value) 
							|| (this._Empleados.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Empleados.Entity = null;
						previousValue.CargoEmpleados.Remove(this);
					}
					this._Empleados.Entity = value;
					if ((value != null))
					{
						value.CargoEmpleados.Add(this);
						this._idEmpleado = value.id;
					}
					else
					{
						this._idEmpleado = default(int);
					}
					this.SendPropertyChanged("Empleados");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
